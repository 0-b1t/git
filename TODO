The GIT To-Do File
==================

  The latest copy of this document is found at 

    http://kernel.org/git/?p=git/git.git;a=blob;hb=todo;f=TODO


Tool Renames Plan
=================

 - In 0.99.8, we still install the backward compatible symbolic
   links in $(bindir).  These will however be removed before 1.0
   happens.

   git-ssh-push and git-ssh-pull pair is not going away within
   this timeframe, if ever.  Each of these old-name commands
   continues to invoke its old-name counterpart on the other
   end.


What to expect after 0.99.8
===========================

This is written in a form of to-do list for me, so if I say
"accept patch", it means I do not currently plan to do that
myself.  People interested in seeing it materialize please take
a hint.  Also whatever I marked "Perhaps" do not have to happen
if ever -- only if somebody cares enough and submits a clean
patch, perhaps ;-).


Documentation
-------------

* Document the ref naming restrictions.

* David Ho's report suggests whatchanged documentation should
  mention -m as "commonly used options".  Steal Linus'
  response [DONE].

* Help Jon Loeliger to find place in the documentation to place
  his drawing.

* Accept patches from people who actually have done CVS
  migration and update the cvs-migration documentation.
  Link the documentation from the main git.txt page.

* Talk about using rsync just once at the beginning when
  initializing a remote repository so that local packs do not
  need to be expanded.  I personally do not think we need tool
  support for this (but see below about optimized cloning).

* Maybe update tutorial with a toy project that involves two or
  three developers..

* Update tutorial to cover setting up repository hooks to do
  common tasks.

* Do we still have missing docs?  If so accept patches to finish
  them.

* Accept patches to talk about "Whoops, it broke.  What's
  next?".

* Accept patches to make formatted tables in asciidoc to work
  well in both html and man pages (see git-diff(1)).


Technical (heavier)
-------------------

* We might want to optimize cloning with GIT native transport
  not to explode the pack, and store it in objects/pack instead.
  We would need a tool to generate an idx file out of a pack
  file for this.  Also this itself may turn out to be a bad
  idea, making the set of packs in repositories everybody has
  different from each other. [DONE; git-index-pack by Sergey,
  tweaking clone by me]

* Git daemon, when deployed at kernel.org, might turn out to be
  quite a burden, since it needs to generate customized packs
  every time a new request comes in.  It may be worthwhile to
  precompute some packs for popular sets of heads downloaders
  have and serve that, even if that could give more than the
  client asks for in some cases.  We will know about this soon
  enough.

* Libification.  There are many places "run once" mentality is
  ingrained in the management of basic data structures, which
  need to be fixed.  [Matthias Urlichs is already working on
  this: <pan.2005.10.03.20.48.52.132570@smurf.noris.de>; Post
  1.0].

* Maybe a pack optimizer.

  Given a set of objects and a set of refs (probably a handful
  branch heads and point release tags), find a set of packs to
  allow reasonably minimum download for all of these classes of
  people: (1) somebody cloning the repository from scratch, (2)
  somebody who tends to follow the master branch head reasonably
  closely, (3) somebody who tends to follow only the point
  releases.

* Maybe an Emacs VC backend.

* 'git split-projects'?  This requires updated 'git-rev-list' to
  skip irrelevant commits.
  Message-ID: <Pine.LNX.4.63.0509221617300.23242@iabervon.org>

* Look at libified GNU diff CVS seems to use, or libxdiff.
  [Daniel has his own diff tool almost ready to start
  integrating and testing; Post 1.0]

* Accept patches to fetch multiple objects by HTTP in parallel.
  [DONE]

* Plug-in file-level merges [Post 1.0].

* Per-repository configuration mechanism [DONE by Linus].


Technical (milder)
------------------

* Merlyn reports trouble with http fetch.

* Maybe look at Cogito and see if I can help Pasky to adjust to
  the later core features?  Zack Brown's "cg-seek leaving empty
  directories" problem is a good example of this.

* Perhaps detect cloning request in upload-pack and cache the
  result for next cloning request until any of our refs change.

* Perhaps accept more "want"s in upload-pack and do something
  intelligent about it.

* Perhaps send less "want"s from fetch-pack.

* Look at svn importer Smurf has.  There is a small cvsimport
  update in his tree as well [DONE].

* Decide the notation of "peeling the onion" operator, and
  implement it in sha1_name.c.  Perhaps postfix "^{}" to mean
  "peel and expect anything", "^{blob}" to mean "peel and barf
  unless blob".  The current "^0" becomes shorthand for
  "^{commit}". [DONE]

* Quote the URL so that libcurl's metecharacter mechanism would
  not kick in [DONE].

* Review the Makefile variables and exporting rules for them,
  while looking at prefix passing by Kai Ruemmler [DONE].

* Review the 'sparse object database' change by Linus and move
  the first phase of it to the "master" branch [DONE].

* Decide on mmap().  I am inclined to just stick to mmap
  replacement by Johannes Schindelin and do nothing else right
  now, except perhaps drop the writing-back support [DONE].

* Revisit Santi's patch to move commit temorary files out of the
  working tree toplevel [DONE].

* More generally, review the use of temporary files again.
  Assuming writable $GIT_DIR is more acceptable, but the
  working tree toplevel may not be in a rare usage pattern.

* Encourage concrete proposals to commit log message templates
  we discussed some time ago.

* Accept patches to cause "read-tree -u" delete a directory when
  it makes it empty [DONE].

* Perhaps accept patches to do undo/redo.

* Perhaps accept patch to optionally allow '--fuzz' in
  'git-apply'.

* Allow 'git apply' to accept GNU diff 2.7 output that forgets
  to say '\No newline' if both input ends with incomplete
  lines.

* What to do with TABs and LFs in pathnames without breaking GNU
  patch?  [DONE -- go with GNU patch extension proposed by Paul].

* Adjust apply.c to proposed GNU patch extension that quotes \n
  and \t in C style, inside "". [DONE]

* Adjust diff.c to the same. [DONE]

* Maybe grok PGP signed text/plain in applymbox as well.

* Perhaps a tool to revert a single file to pre-modification
  state?  People with BK background know this operation as
  'clean'.  'git checkout [-f] ent [path...]' was suggested by
  Matthias Urlichs which sounds a natural extention to what the
  command currently does.

* Enhance "git repack" to not always use --all; this would be
  handy if the repository contains wagging heads like "pu" in
  git.git repository.

* Internally split the project into non-doc and doc parts; add
  an extra root for the doc part and merge from it; move the
  internal doc source to a separate repository, like the +Meta
  repository; experiment if this results in a reasonable
  workflow, and document it in howto form if it does.

  The point is to make it possible to fork that part off to
  somebody else; then I do not have to maintain Documentation
  directory myself anymore, just like I simply slurp the latest
  gitk from Paul and not worry about it ;-).

* Make rebase restartable; instead of skipping what cannot be
  automatically forward ported, leave the conflicts in the work
  tree, have the user resolve it, and then restart from where it
  left off [mechanism mostly done].

* Output full path in the "git-rev-list --objects" output, not
  just the basename, and see the improved clustering results in
  better packing [Tried, but did not work out well].

* Updated git-changes-script Jeff Garzik needs [Inquiry for
  external spec sent out with a quick hack.  Will know if that
  is what he needs hopefully soon].

* An mechanism to ignore filesystem mode bits altogether [DONE].


Technical (trivial)
-------------------

* Peter Hagervall's sparse fix [DONE].

* Alex Riesen reported that hooks are in effect in tests.
  Should fix [DONE].

* Disallow [\001-\040\177] byte values from ref names.  Also we
  need to disallow ':' (used in refspec), '^' and '~' (postfix
  "peel the onion" operators), and '..' ("ref1..ref2" notation
  becomes ambiguous otherwise) [DONE].

* Update fetch-pack and clone-pack to ignore funny refs from the
  other end, while making sure peek-remote does not discard them.
  [DONE]

* Update upload-pack to send tag^{}.  This would hopefully help
  Pasky's automated tag tracking, and also Martin's findtags.
  [DONE]

* Adjust update-index to quoted --index-info [DONE].

* Prepare apply.c changes for maint branch (0.99.8e) [READY].

* Perhaps show ^{commit}, ^{tree} instead of ^{} from ls-remote?

* Re-adjust maint branch for the above if we did so.

* short SHA1 naming is not enforcing uniqueness.  Should fix [DONE].

* 'git repack' can be DOSed.  Should fix [DONE].

* Stop installing the old-name symlinks [POSTPONED, but before 1.0].

* 'git merge-projects'?

  Subject: Re: Merges without bases
  References: <1125004228.4110.20.camel@localhost.localdomain>
  Date: Thu, 25 Aug 2005 15:26:36 -0700
  Message-ID: <7vvf1tps9v.fsf@assigned-by-dhcp.cox.net>

* 'git lost-and-found'?  Link dangling commits found by
  fsck-objects under $GIT_DIR/refs/lost-found/.  Then
  show-branch or gitk can be used to find any lost commit. [A
  feeler patch sent out. Very underwhelming response X-<.]

  Do not name it /lost+found/; that would probably confuse
  things that mistake it a mount point (not our code but
  somebody else's).

* Add simple globbing rules to git-show-branch so that I can
  say 'git show-branch --heads "ko-*"' (ko-master, ko-pu, and
  ko-rc are in refs/tags/).

* We would want test scripts for the relative directory path
  stuff Linus has been working on.  So far, the following
  commands should be usable with relative directory paths:

    git-update-index
    git-ls-files
    git-diff-files
    git-diff-index
    git-diff-tree
    git-rev-list
    git-rev-parse

* In a freashly created empty repository, `git fetch foo:bar`
  works OK, but `git checkout bar` afterwards does not (missing
  `.git/HEAD`).


Local Variables:
mode: text
End:
